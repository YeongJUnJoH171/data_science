# -*- coding: utf-8 -*-
"""2018320171_HW1_datascience.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1q48-UH6g5CmYPQtKrqLllGVVCNvkLG59

Question 1.
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import matplotlib
# %matplotlib inline
import matplotlib.pyplot as plt
plt.style.use('fivethirtyeight')
from IPython.display import display, Latex, Markdown

def mean(population):

 """
 Compute the mean of population (mu).

 Args:
 population: a numpy array of numbers of shape [N,]
 Returns:
 the mean of population (mu).
 """
 # Calculate the mean of a population
 # BEGIN YOUR CODE
 # -----------------------
 a = 0
 for n in population :
   a = a + n
 mean = a / len(population)
 return mean
 # -----------------------
 # END YOUR CODE

def variance(population):
 """
 Compute the variance of population (sigma squared).

 Args:
 population: a numpy array of numbers of shape [N,]
 Returns:
 the variance of population
 """
 # Calculate the variance of a population
 # BEGIN YOUR CODE
 # -----------------------
 a = 0
 for i in population :
   a = a + i
 mean = a / len(population)

 b = 0
 for i in population:
   b = b + pow((i - mean),2)
 
 var = b / len(population)
 return var
 # --------------------

population_0 = np.random.randn(100)
assert np.isclose(mean(population_0), np.mean(population_0), atol=1e-6)
assert np.isclose(variance(population_0), np.var(population_0), atol=1e-6)
population_1 = 3 * np.random.randn(100) + 5
assert np.isclose(mean(population_1), np.mean(population_1), atol=1e-6)
assert np.isclose(variance(population_1), np.var(population_1), atol=1e-6)

"""Question 2."""

#2-a
v = np.array([2,1,4])
# BEGIN YOUR CODE
# -----------------------
B = np.array([[2, 2, 2],
             [5, 8, 0],
             [0, 2, 3],
             [0, 0, 10]])
# -----------------------
# END YOUR CODE
# The notation B @ v means: compute the matrix multiplication Bv
B @ v

assert B.shape == (4, 3)
assert np.allclose(B @ v, np.array([14, 18, 14, 40]))

#2-b
A = np.array([
 [2, 1, 0, 0],
 # Finish this!
 # BEGIN YOUR CODE
 # -----------------------
 [1, 1, 1, 1],
 [0, 0, 0, 10]
 # -----------------------
 # END YOUR CODE
])
A @ B @ v

assert A.shape == (3, 4)
assert np.allclose(A @ B @ v , np.array([ 46, 86, 400]))

#2-c
# BEGIN YOUR CODE
# -----------------------
total_price = A @ B @ v  
name = ["Joey", "Deb", "Sam"]

maximum = max(total_price)
highest_buy = np.argmax(total_price)
#print(name[highest_buy])
most = name[highest_buy]
# -----------------------
# END YOUR CODE

assert most in ["Joey", "Deb", "Sam"]

#2-d
# BEGIN YOUR CODE
# -----------------------
X = np.array([80, 80, 100])
print(X.shape)

i = np.linalg.inv(A @ B) 
print(i.shape)
new_v = i @ X
# -----------------------
# END YOUR CODE
new_v

assert new_v.shape == (3,)
assert np.allclose(new_v, np.array([ 5.5, 2.20833333, 1.]))

"""Question 3.

\

3-a

$\frac{df}{dx} = 2x + 4y$

$\frac{df}{dy} = 4x + 6y^{2} - 3e^{-3y} + \frac{1}{y}$

$ ‚àáùëì(ùë•, ùë¶)  = \begin{bmatrix} \frac{df}{dx} , \frac{df}{dy}  \end{bmatrix} = \begin{bmatrix} 2x + 4y ,4x + 6y^2 -3e^{-3y} + \frac{1}{y} \\ \end{bmatrix}$

$ ‚àáùëì(2, -1)  = \begin{bmatrix} 0 , 13 -3e^{3} \\ \end{bmatrix}$

3-b 

\
$f(x) = \sum_{x=1}^{10}(i-x)^2$

$\frac{df}{dx} = \sum_{x=1}^{10}-2(i-x)$

$ f(x)$ is minimum when $ \frac{df}{dx} = 0 $

therefore, 

$ x = 5.5 $

Question 4.

\
4-a

$ 1 - \frac{1}{1+e^{-x}} = \frac{1 + e^{-x}}{1 + e^{-x}} - \frac{1}{1+e^{-x}}$

$ = \frac{e^{-x}}{1+e^{-x}} = \frac{1}{1+e^{x}} = ùúé(‚àíùë•) $


4-b

$$ \frac{d}{dx}(1+e^{-x})^{-1} = -(1+e^{-x})^{-2}*\frac{d}{dx}(1+e^{-x}) = \frac{e^{-x}}{(1+e^{-x})^2}$$

$$ \frac{e^{-x}}{(1+e^{-x})^2} = \frac{1}{(1+e^{-x})} * \frac{e^{-x}}{(1+e^{-x})} =  ùúé(ùë•)(1 ‚àí ùúé(ùë•))$$

Question 5.

\
let A = 'test positive' and B = 'cancer'

$P(B|A) = \frac{P(B)P(A|B)}{P(B)P(A|B) + P(B^c)P(A|B^c)} = \frac{0.01 * 0.8}{0.01 * 0.8 + 0.99 * 0.096} = 0.07763975$

Question 6.
"""

#6-a
from scipy import special
from scipy.special import comb
def prob_at_most(n, p, s):
 """
 returns the probability of S <= s
 Input n: sample size; p : proportion; s: number of successes at most
 """
 if p > 1 or s > n:
  return 0
 # BEGIN YOUR CODE
 # -----------------------
 all_probs = []
 
 for k in range(s+1):
   a = comb(n, k, exact=True, repetition = False)
   b = pow(p,k) * pow((1-p),(n-k))
   all_probs.append(a*b)
 # -----------------------
 # END YOUR CODE
 
 return sum(all_probs[:s+1])

assert prob_at_most(3, 0.4, 1) >= 0
assert prob_at_most(5, 0.6, 3) <= 1
assert prob_at_most(2, 3, 4) == 0

#6-b
# BEGIN YOUR CODE
# -----------------------
p_majority = 1 - prob_at_most(200, 0.45, 100)
# -----------------------
# END YOUR CODE
p_majority

assert p_majority >= 0 and p_majority <= 1

#6-c
 # BEGIN YOUR CODE
# -----------------------
prob_6c = 1 - prob_at_most(200, 0.45, 100) * prob_at_most(200, 0.45, 100) * prob_at_most(200, 0.45, 100) * prob_at_most(300, 0.45, 150) *prob_at_most(400, 0.45, 200)
# -----------------------
# END YOUR CODE
prob_6c

"""Question 7."""

#7-a
def draw_state_sample(N, state):
 # BEGIN YOUR CODE
 # -----------------------
 if (state == 'florida'):
   a = 0.4902 
   b = 0.4782 
   result = np.random.multinomial( n = 1500, pvals=[a, b, (1-a-b)])
 if (state == 'michigan'):
   a = 0.4750 
   b = 0.4727 
   result = np.random.multinomial( n = 1500, pvals=[a, b, (1-a-b)])
 if (state == 'pennsylvania'):
   a = 0.4818 
   b = 0.4746 
   result = np.random.multinomial( n = 1500, pvals=[a, b, (1-a-b)])
 if (state == 'wisconsin'):
   a = 0.4722 
   b = 0.4645 
   result = np.random.multinomial( n = 1500, pvals=[a, b, (1-a-b)])   
 
 return result

 # ----------------

assert len(draw_state_sample(1500, "florida")) == 3
assert sum(draw_state_sample(1500, "michigan")) == 1500
q7a_penn = draw_state_sample(1500, "pennsylvania")
trump_win_penn = (q7a_penn[0] - q7a_penn[1]) / 1500
abs(trump_win_penn - 0.007) <= 0.12

#7-b
def trump_advantage(voter_sample):
 # BEGIN YOUR CODE
 # -----------------------
 sum = 0
 for n in range(3):
   sum = sum + voter_sample[n]
 
 return voter_sample[0]/sum - voter_sample[1]/sum 
 # -----------------------
 # END YOUR CODE

assert -1 < trump_advantage(draw_state_sample(1500, "wisconsin")) < 1
assert np.isclose(trump_advantage([100, 60, 40]), 0.2)
assert np.isclose(trump_advantage([10, 30, 10]), -0.4)

#7-c
# BEGIN YOUR CODE
# -----------------------
a = []
for n in range(100000):
  a.append(trump_advantage(draw_state_sample(1500, "pennsylvania")))
simulations = a
# -----------------------
# END YOUR CODE

assert len(simulations) == 100000
assert sum([-1 < x < 1 for x in simulations]) == len(simulations)
assert abs(np.mean(simulations) - 0.007) <= 0.016

#7-d
def trump_wins(N):
 # BEGIN YOUR CODE
 # -----------------------
 a = trump_advantage(draw_state_sample( N, "florida"))
 b = trump_advantage(draw_state_sample( N, "michigan"))
 c = trump_advantage(draw_state_sample( N, "pennsylvania"))
 d = trump_advantage(draw_state_sample( N, "wisconsin"))
 #print(a, b, c, d)
 if (a > 0 and (b >0 or c >0  or d>0)) : return 1 
 elif (b > 0 and c > 0 and d > 0) : return 1
 else: return 0 

 # -----------------------
 # END YOUR CODE



assert trump_wins(1000) in [0, 1]

#7-e
# BEGIN YOUR CODE
# -----------------------
final = []
for n in range(100000):
  final.append(trump_wins(1500))

final_sum = sum(final)
proportion_trump = final_sum/len(final)
# -----------------------
# END YOUR CODE
proportion_trump

assert 0 < proportion_trump < 1
assert abs(proportion_trump - 0.695) <= 0.02